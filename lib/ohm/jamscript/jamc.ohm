JAMC <: C {
    Source         := External_decl+

    Namespace_spec  = jname id ";" // This looks rather like a typedef'd global decl...

    Jcond_specifier = "{" Jcond_expr "}"

    Jcond_expr      = "(" Jcond_expr ")"                            -- paran
                    | "!" Jcond_expr                                -- not
                    | Jcond_expr jcond_expr_op Jcond_expr           -- bin_op
                    | id "." id                                     -- namespace
                    | id                                            -- id

    jcond_expr_op   = "&&" | "||"

    Async_prototype = jtaskAsync (id ".")? id "(" Jamparam_type_lst? ")" ";"

    Sync_prototype  =  jtaskSync Jamtype_return (id ".")? id "(" Jamparam_type_lst? ")" ";"

    Async_task      = jtaskAsync Jcond_specifier? Jtask_attr_spec? id "(" Jamparam_type_lst? ")" Compound_stmt

    Sync_task       = jtaskSync Jamtype_return Jcond_specifier? Jtask_attr_spec? id "(" Jamparam_type_lst? ")" Compound_stmt

    Jtask_attr_spec = "[" ListOf<Jtask_attr, ",">  "]"

    Jtask_attr      = type "=" (sync | realtime | batch)
                    | period "=" number
                    | jitter "=" number
                    | reuse "=" (true | false)
                    | reuse_limit "=" decimalInt
                    | reuse_buffer "=" decimalInt
                    | reuse_function "=" id

    Jamtype_return  = Jamtype
                    | void                                             -- Void

    Jamtype         = unsigned? int                                    -- Int
                    | unsigned                                         -- IntUnsigned
                    | unsigned? long long int?                         -- LongLongInt
                    | long unsigned long int?                          -- LongUnsignedLongInt
                    | long long unsigned int?                          -- LongLongUnsignedInt
                    | unsigned? char                                   -- Char
                    | string_type ( "(" decimalInt ")" )?              -- String
                    | float                                            -- Float
                    | double                                           -- Double

    Jamparam_type_lst = NonemptyListOf<Jamparam_decl, ",">

    Jamparam_decl   = Jamtype id ( "[" decimalInt "]" )?

    Task_def        = Sync_task
                    | Async_task
    Jamprototype    = Sync_prototype
                    | Async_prototype

    External_decl   += Task_def
                    | Jamprototype
                    |  Namespace_spec

    keyword         += jtaskAsync | jtaskSync | jname | string_type

    string_type = "string" ~identPart
    jtaskAsync = "jtask*" ~identPart
    jtaskSync = "jtask" ~identPart
    jname = "jname" ~identPart
    type = "type" ~identPart
    period = "period" ~identPart
    jitter = "jitter" ~identPart
    reuse = "reuse" ~identPart
    reuse_limit = "reuse_limit" ~identPart
    reuse_buffer = "reuse_buffer" ~identPart
    reuse_function = "reuse_function" ~identPart
    batch = "BATCH" ~identPart
    sync = "SYNC" ~identPart
    realtime = "REALTIME" ~identPart
    true = "true" ~identPart
    false = "false" ~identPart
}