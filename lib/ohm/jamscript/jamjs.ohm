JAMJS <: ES6 {
    GlobalElement   += Jexport
                    | Jmanifest
                    | Jcond_decl
                    | Jdata_decl
                    | Task_def

    Jexport         = jexport identifier ";"

    Jmanifest       = ( japp | jcomponent ) identifier "{" ListOf<Jfile_list, ";"> ";"? "}"

    Jfile_list      = Jfile_type ":" ListOf<stringLiteral, ",">

    Jfile_type      = "jside" | "cside" | "header" | "others" | "components" | "required_clibs" | "required_jlibs"

    Async_task  = jasync Jcond_specifier? Jtask_attr_spec? identifier "(" Jamparam_type_lst ")" FunctionBody

    Sync_task   = jsync Jamtype_return Jcond_specifier? Jtask_attr_spec? identifier "(" Jamparam_type_lst ")" FunctionBody

    Jamtype_return  = Jamtype
                    | Jamtype "[" decimalIntegerLiteral "]"            -- Array
                    | void                                             -- Void

    Jamparam_type_lst = ListOf<Jamparam_decl, ",">

    Jamparam_decl   = identifier ":" Jamtype ( "[" "]" )?

    Jamtype         = unsigned? int                                    -- Int
                    | unsigned                                         -- IntUnsigned
                    | unsigned? long long int?                         -- LongLongInt
                    | long unsigned long int?                          -- LongUnsignedLongInt
                    | long long unsigned int?                          -- LongLongUnsignedInt
                    | unsigned? char                                   -- Char
                    | float                                            -- Float
                    | double                                           -- Double

    Struct_entry    = Jamtype identifier ("[" decimalIntegerLiteral "]")? ";"

    Jdata_spec      = Jamtype identifier as Jflow_type ";"                                 -- Basic
                    | struct identifier "{" Struct_entry+ "}" identifier as Jflow_type ";" -- Struct
                    | Jamtype identifier "[" decimalIntegerLiteral "]" as Jflow_type ";"   -- Array

    Jflow_type      = dflow | uflow

    Jdata_decl      = jdata identifier? "{" Jdata_spec+ "}"

    Jcond_decl      = jcond identifier? "{" Jcond_entry+ "}"

    Jcond_entry     = identifier ":" Jcond_decl_expr ";"

    Jcond_decl_expr = "(" Jcond_expr ")"                            -- paran
                    | "!" Jcond_expr                                -- not
                    | Jcond_expr jcond_op Jcond_expr                -- bin_op
                    | Jcond_expr "." identifier                     -- namespace
                    | identifier

    jcond_op        = "==" | "!=" | "===" | "!==" | "<" | ">" | "<=" | ">=" | "&&" | "||"

    Jcond_specifier = "{" Jcond_expr "}"

    Jcond_expr      = "(" Jcond_expr ")"                            -- paran
                    | "!" Jcond_expr                                -- not
                    | Jcond_expr jcond_expr_op Jcond_expr           -- bin_op
                    | Jcond_expr "." identifier                     -- namespace
                    | identifier

    jcond_expr_op   = "&&" | "||"

    Jtask_attr_spec = "[" ListOf<Jtask_attr, ",">  "]"

    Jtask_attr      = reuse "=" booleanLiteral
                    | reuse_limit "=" numericLiteral
                    | reuse_argdev "=" percentage
                    | max_rate "=" numericLiteral

   	percentage 	    = decimalLiteral "%"

    Task_def        = Sync_task
                    | Async_task

    keyword         += jexport | japp | jcomponent | jsync | jasync | jdata | jcond

    as = "as" ~identifierPart
    at = "at" ~identifierPart
    jexport = "jexport" ~identifierPart
    japp = "japp" ~identifierPart
    jcomponent = "jcomponent" ~identifierPart
    int = "int" ~identifierPart
    long = "long" ~identifierPart
    char = "char" ~identifierPart
    unsigned = "unsigned" ~identifierPart
    float = "float" ~identifierPart
    double = "double" ~identifierPart
    struct = "struct" ~identifierPart
    dflow = "dflow" ~identifierPart
    uflow = "uflow" ~identifierPart
    jasync = "jasync" ~identifierPart
    jsync = "jsync" ~identifierPart
    jdata = "jdata" ~identifierPart
    jcond = "jcond" ~identifierPart
    reuse = "reuse" ~identifierPart
    reuse_limit = "reuse_limit" ~identifierPart
    reuse_argdev = "reuse_argdev" ~identifierPart
    max_rate = "max_rate" ~identifierPart
}