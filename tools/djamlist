#!/bin/bash

IDIR="${BASH_SOURCE%/*}"
if [[ ! -d "$IDIR" ]]; then IDIR="$PWD"; fi
source "$IDIR/inc/misc_tools.sh"

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
A tool to display the active programs and their attributes.
Usage: djamlist

djam list [--help]

djam list [--all]

djam list [--monitor]

djam list [--remote]

djam list [--type==fog]

djam list [--dataStore==127.0.0.1:21883]

djam list [--tmuxid==tg-25165]

djam list [--port=3]

djam list [--app==XX3]

djam list [--prog==X]

This is the docker version of jamlist.

EOF
}

run_djamlist() {
    # Get a list of all running container IDs
    local containers
    containers=$(docker ps -q)

    # If no containers are running, exit
    if [[ -z "$containers" ]]; then
        echo "No running Docker containers found."
        exit 1
    fi

    # Count the number of containers (each on its own line)
    local num_containers
    num_containers=$(echo "$containers" | wc -l | tr -d ' ')

    # If 1 or fewer containers, assume no JAMScript instances are running.
    if (( num_containers <= 0 )); then
        echo "No running instances of JAMScript on this server."
        exit 0
    fi

    # Loop through each container and run djamlist inside it
    for container in $containers; do
        output=$(docker exec -t "$container" jamlist 2>/dev/null)
        # Remove blank lines for an accurate comparison
        trimmed=$(echo "$output" | sed '/^$/d')
        # If the output is exactly "No running instances of JAMScript.", skip this container.
        if [[ "$trimmed" == "No running instances of JAMScript." ]]; then
            continue
        fi

        echo "ContainerID: $container"
        # Print output line by line, filtering out unwanted error messages
        while IFS= read -r line; do
            if echo "$line" | grep -q "cannot access"; then
                continue
            fi
            echo "$line"
        done <<< "$output"
        echo
    done
}

run_djamlist

