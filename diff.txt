12c12,13
<       child_process = require('child_process');
---
>       child_process = require('child_process'),
>       toml    = require('toml');
13a15,48
> 
> const USAGE = `
> jamtoast [options] file
> Toaster is a testing framework for JAMScript that wraps over jamrun.
> Individual test files and test directories are both accepted inputs. If a
> directory is provided, toaster will recursively search for tests. Currently,
> a test is defined as one javascript file and one C file in the same directory
> with the same name. To specify an indidivudal test provide the path to the test
> without the .js or .c extension.
> 
> 
> Command Line Options:
> -t [duration] --timeout [duration]   sets the maximum amount of time for a test to run.
> 
> 
> Keywords:
> Toaster provides two keywords that can be used inside of tests (both jside and cside).
> 
> assert(condition);     -- this functions as a regular assert but hooks into the toaster error logging system
> coverage();            -- For a test to pass it must execute every coverage function in the test at least once.
> 
> 
> Toaster Config:
> For tests that must run on multiple nodes at once, the toaster config is a way of
> describing basic network structure. This is all done through comments within one of your test files.
> 
> You start the configuration with the @ToasterConfig annotation.
> 
> // @ToasterConfig
> // Fogs: [number of fogs]
> // Devices: [number of devices]
> // Workers: [number of workers for each device]
> `;
> 
20c55
< `jtask function assert(cond){if(!cond){let _err = new Error(); console.log("\\n@ToasterAssert#{"+_err.stack+"}#");}}
---
> `jtask function assert(cond){if(!(cond)){let _err = new Error(); console.log("\\n@ToasterAssert#{"+_err.stack+"}#");}}
24,25c59,60
< #define assert(cond, line) {if(!cond){printf("\\n@ToasterAssert#{%d, %s}#\\n", line, #cond);}}
< #define coverage(_id){printf("\\n@ToasterCoverage#{%d}#\\n", _id);}\n`;
---
> #define assert(cond, line) {if(!(cond)){printf("\\n@ToasterAssert#{%d, %s}#\\n", line, #cond);fflush(stdout);}}
> #define coverage(_id){printf("\\n@ToasterCoverage#{%d}#\\n", _id);fflush(stdout);}\n`;
39a75,76
> const MAGIC_ANSI_REMOVAL_REGEX = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
> 
70a108,119
> Toaster.prototype.writeLog = function(text) {
>   process.stdout.write(text);
>   if(this.logFile) {
>     let prunedText = text.replace(MAGIC_ANSI_REMOVAL_REGEX,"");
>     fs.writeSync(this.logFile, prunedText);
>   }
> }
> 
> Toaster.prototype.log = function(text) {
>   this.writeLog(text+"\n");
> }
> 
80c129
<     process.stdout.write(`${prefix}${ansiiYellow(test.testName)} ${ansiiYellow("Compiling")} `);
---
>     this.writeLog(`${prefix}${ansiiYellow(test.testName)} ${ansiiYellow("Compiling")} `);
83c132
<     process.stdout.write(`${prefix}${beginning} Starting...`)
---
>     this.writeLog(`${prefix}${beginning} Starting...`)
90c139
<     process.stdout.write(`${prefix}${beginning} ${ansiiYellow("Running")} ${coverageStatus}`)
---
>     this.writeLog(`${prefix}${beginning} ${ansiiYellow("Running")} ${coverageStatus}`)
92c141
<     process.stdout.write(`${prefix}${ansiiGreen(test.testName + " Passed")}`)
---
>     this.writeLog(`${prefix}${ansiiGreen(test.testName + " Passed")}`)
95c144
<       process.stdout.write(`${prefix}${test.compilerWarnings}`);
---
>       this.writeLog(`${prefix}${test.compilerWarnings}`);
129c178
<       process.stdout.write(`${prefix}${ansiiRed(test.testName + " Failed")} (${reason}) `)
---
>       this.writeLog(`${prefix}${ansiiRed(test.testName + " Failed")} (${reason}) `)
131c180
<       process.stdout.write(`${prefix}${ansiiRed(test.testName + " Failed to compile")}`);
---
>       this.writeLog(`${prefix}${ansiiRed(test.testName + " Failed to compile")}`);
133c182
<       process.stdout.write(`${prefix}${ansiiRed(test.testName + " Failed to start test")} `);
---
>       this.writeLog(`${prefix}${ansiiRed(test.testName + " Failed to start test")} `);
151c200
<       console.log("Using default test directory " + DEFAULT_TEST_DIR);
---
>       this.log("Using default test directory " + DEFAULT_TEST_DIR);
154c203
<       console.log("Must provide a test folder.");
---
>       this.log("Must provide a test folder.");
166a216,217
>   this.logFile = undefined;
> 
185a237,238
> 
>   this.logFile = fs.openSync(`${this.resultDirectory}/log.txt`, 'w');
203d255
< 
206a259,260
> 	  appName: testName,
> 	  testFolder: folder,
220c274,277
<             fogs: 0
---
>             workers: 1,
>             fogs: 0,
> 	    netDescPath: undefined,
> 	    netDesc: undefined
231a289
>     let folder = basename.substring(0, basename.lastIndexOf('/'));
235a294,295
>       appName: basename,
>       testFolder: folder,
249c309,312
<         fogs: 0
---
>         workers: 1,
>         fogs: 0,
> 	netDescPath: undefined,
> 	netDesc: undefined
255c318
<   console.log(`Found ${this.tests.length} tests.`);
---
>   this.log(`Found ${this.tests.length} tests.`);
296c359,360
< 
---
> const WORKERS_KEYWORD = "workers:";
> const NET_DESC_KEYWORD = "networkdescriptor:";
298c362
<   const keywords = [FOGS_KEYWORD, DEVICES_KEYWORD];
---
>   const keywords = [FOGS_KEYWORD, DEVICES_KEYWORD, WORKERS_KEYWORD, NET_DESC_KEYWORD];
316c380,388
<           }
---
>           } else if (keyword == WORKERS_KEYWORD) {
>             test.networkConfig.workers = parseInt(value);
>           } else if (keyword == NET_DESC_KEYWORD) {
> 
> 	    if(test.networkConfig.netDescPath != undefined) {
> 	      this.log("ERROR: More than one network descriptor provided!");
> 	    }
> 	    test.networkConfig.netDescPath = value;
> 	  }
321c393
<         return;
---
>         break;
323a396,408
>     // Check valid config
>     if(test.networkConfig.netDescPath && (test.networkConfig.fogs != 0 || test.networkConfig.devices != 1)) {
>       this.log("ERROR: Toaster config has both network descriptor and manual network configuration.");
>     }
> 
>     if(test.networkConfig.netDescPath) {
>       let netDescToml = fs.readFileSync(test.testFolder + "/" + test.networkConfig.netDescPath);
>       test.networkConfig.netDesc = toml.parse(netDescToml);
>       
>       if('appname' in test.networkConfig.netDesc) {
> 	test.appName = test.networkConfig.netDesc['appname'];
>       }
>     }
424c509
<         console.log(`\nAssert is missing condition! \\/ (${lineCount})\n--> ${line}`);
---
>         this.log(`\nAssert is missing condition! \\/ (${lineCount})\n--> ${line}`);
476c561
<   //process.stdout.write("Compiling... ");
---
>   //this.writeLog("Compiling... ");
523c608
<     /*console.log("Failed!");*/
---
>     /*this.log("Failed!");*/
529c614
<     //console.log(` Full log can be found at ${test.logFile}`);
---
>     //this.log(` Full log can be found at ${test.logFile}`);
547,551d631
< // Built in process kill not working.
< function kill(pid) {
<   child_process.execSync(`kill -- ${pid}`, {stdio:'ignore'});
< }
< 
573a654,657
>   if(test.state == TestState.STARTING) {
>     this.setTestState(test, TestState.RUNNING);
>   }
> 
576a661
> 
578,580c663
<     if(test.state == TestState.STARTING) {
<       this.setTestState(test, TestState.RUNNING);
<     } else if (test.state == TestState.PASSED ||
---
>     if (test.state == TestState.PASSED ||
600d682
<       let keywordIndex = -1;
602c684
<       if((keywordIndex = line.indexOf(TOASTER_ASSERT_KEYWORD)) != -1) {
---
>       if(line.includes(TOASTER_ASSERT_KEYWORD)) {
607c689
<       } else if ((keywordIndex = line.indexOf(TOASTER_COVERAGE_KEYWORD)) != -1) {
---
>       } else if (line.includes(TOASTER_COVERAGE_KEYWORD)) {
636c718,722
< Toaster.prototype.executeTest = async function(test, machType) {
---
> Toaster.prototype.executeTest = async function(test,
> 					       machType,
> 					       tags=undefined,
> 					       data=undefined,
> 					       shouldHost=undefined) {
642,643c728
<     "--disable-stdout-redirect",
<     "--temp_broker"];
---
>     "--disable-stdout-redirect"];
646a732,733
>   } else if (machType==NODETYPE_DEVICE){
>     args.push(`--num=${test.networkConfig.workers}`);
648a736,745
>   if(tags) {
>     args.push("--tags="+tags);
>   }
>   if(data) {
>     args.push("--data="+data);
>   }
>   if(shouldHost && machType==NODETYPE_FOG) {
>     args.push("--local_registry");
>   }
> 
662c759
<     }catch(e){console.log(e)}
---
>     }catch(e){this.log(e)}
668c765
<   let testProcess = child_process.spawn(command, args, {shell: true, detached: true});
---
>   let testProcess = child_process.spawn(command, args, {shell: false, detached: true});
672a770
>       debugger;
715a814
>         debugger;
759a859
>   process.exit(1);
763c863
<   process.stdout.write('\n');
---
>   this.writeLog('\n');
777,779c877,903
<     for(let _ = 0; _ < test.networkConfig.devices; _++){
<       this.executeTest(test, NODETYPE_DEVICE).then(()=>{resolve()});
<     }
---
>     if(test.networkConfig.netDesc) {
>       let netDesc = test.networkConfig.netDesc;
>       console.log(netDesc);
>       if('fog' in netDesc) {
> 	for (let fog of netDesc['fog']) {
> 	  this.executeTest(test,
> 			   NODETYPE_FOG,
> 			   fog['tags'],
> 			   fog['data'],
> 			   fog['hostLocalRegistry']
> 			  ).then(()=>{resolve()});
> 	}
>       }
>       
>       if('device' in netDesc) {
> 	for (let fog of netDesc['device']) {
> 	  this.executeTest(test,
> 			   NODETYPE_DEVICE,
> 			   fog['tags'],
> 			   fog['data']
> 			  ).then(()=>{resolve()});
> 	}
>       }
>     } else {
>       for(let _ = 0; _ < test.networkConfig.devices; _++){
> 	this.executeTest(test, NODETYPE_DEVICE).then(()=>{resolve()});
>       }
781,782c905,907
<     for(let _ = 0; _ < test.networkConfig.fogs; _++){
<       this.executeTest(test, NODETYPE_FOG).then(()=>{resolve()});
---
>       for(let _ = 0; _ < test.networkConfig.fogs; _++){
> 	this.executeTest(test, NODETYPE_FOG).then(()=>{resolve()});
>       }
783a909
>      
784a911
>   
815c942
<   console.log(exitText);
---
>   this.log(exitText);
817c944
<   console.log(`Complete Logs: ${this.resultDirectory}`);
---
>   this.log(`Toaster Log: ${this.resultDirectory}/log.txt`);
820c947
<     console.log("Logs of Failed Tests:");
---
>     this.log("Logs of Failed Tests:");
823c950
<         console.log(`${ansiiRed(test.testName)} ${" ".repeat(Math.max(0,20-test.testName.length))} ${test.logFile}`);
---
>         this.log(`${ansiiRed(test.testName)} ${" ".repeat(Math.max(0,20-test.testName.length))} ${test.logFile}`);
826a954,958
> 
>   if(this.logFile) {
>     fs.close(this.logFile);
>     this.logFile = undefined;
>   }
845a978,980
>       } else if (args[i] === "-h" || args[i] === "--help") {
> 	  console.log(USAGE);
> 	  process.exit();
